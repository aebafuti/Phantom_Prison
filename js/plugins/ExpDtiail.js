//=============================================================================
// □ 経験値詳細設定
//   ScriptMaterials Lab.
//=============================================================================
function 経験値詳細設定() {throw new Error('これは、静的なクラスです');}
//--------------------------------------------------------------------------
// □ 経験値リスト
//--------------------------------------------------------------------------
経験値詳細設定.経験値リスト = function(classId) { switch (classId) {
case 1  : return [   0,  100,  200,  300,  400,  500,  600,  700,  800,  900,] // 職業ID 1
}}
//--------------------------------------------------------------------------
// □ 自動加算値
//--------------------------------------------------------------------------
経験値詳細設定.自動加算値 = function(classId) { switch (classId) {
case 1  : return 100
default : return 100 // 該当しない職業IDの値
}}
//--------------------------------------------------------------------------
// □ プラグインエディタ
//--------------------------------------------------------------------------
/*:ja
 * @plugindesc 経験値を詳細に設定します。
 * @author ScriptMaterials Lab.
 * 
 * @param 経験値リスト
 * @desc 経験値詳細設定.js を開いて
 * 経験値詳細設定.経験値リスト に直接記述します。
 * @default プラグインエディタからの設定は不可能です。
 * 
 * @param 自動加算値
 * @desc 経験値詳細設定.js を開いて
 * 経験値詳細設定.自動加算値 に直接記述します。
 * @default プラグインエディタからの設定は不可能です。
 * 
 * @help 【概要】
 * 経験値を詳細に決めるプラグインです。
 * 
 * プラグインエディタの仕様上
 * パラメータの設定が正常に行えない為
 * 経験値詳細設定.jsを開いて
 * 直接書き込む必要があります。
 * 
 * 
 * 【設定方法】
 * 経験値リスト：
 * 経験値を詳細に決めるリストを設定します。
 * 
 * プラグインエディタの仕様上により
 * パラメータで設定する事ができない為
 * 経験値詳細設定.jsを開いて
 * 直接書き込む必要があります。
 * 
 * 記述方法：
 * 経験値詳細設定.経験値リスト = function(classId) { switch (classId) {
 * case 職業ID : return [0, レベル2の経験値, …]
 * …
 * }}
 * 
 * 
 * 自動加算値：
 * 経験値リストでnull（値が存在しない）が検出された場合
 * 最終レベルまで自動的に加算される値を設定します。
 * 
 * プラグインエディタの仕様上により
 * パラメータで設定する事ができない為
 * 経験値詳細設定.jsを開いて
 * 直接書き込む必要があります。
 * 
 * 記述方法：
 * 経験値詳細設定.自動加算値 = function(classId) { switch (classId) {
 * case 職業ID : return 値
 * …
 * default : return 値 // 該当しない職業IDの値
 * }}
 * 
 * 
 * 【プラグインコマンド】
 * ありません。
 * 
 * 
 * 【再定義部分】
 * Game_Actor.prototype.expForLevel
 * 
 * 
 * 【注意点】
 * レベル９９以降の経験値も設定できますが
 * このプラグイン単体で、レベル９９以上にする事はできません。
 * 
 * 
 * 【バージョン】
 * 1.00
 */
//--------------------------------------------------------------------------
// □ 準備 設定
//--------------------------------------------------------------------------
if (typeof $ScriptMaterialsLab == "undefined") {$ScriptMaterialsLab = {};}
$ScriptMaterialsLab['経験値詳細設定'] = true;
$ScriptMaterialsLab['経験値詳細設定version'] = 1.00;
$ScriptMaterialsLab['経験値詳細設定・拡張'] = [];
//--------------------------------------------------------------------------
// □ スクリプト 設定
//--------------------------------------------------------------------------
(function() {
	//--------------------------------------------------------------------
	// ● Game_Actor.prototype.expForLevel
	//   共用化スクリプト Version 1.00
	//--------------------------------------------------------------------
	var flag = (typeof $ScriptMaterialsLab['Game_Actor.prototype.expForLevel'] == "undefined") ? true : $ScriptMaterialsLab['Game_Actor.prototype.expForLevel・version'] < 1.00;
	if (flag) {
	Game_Actor.prototype.expForLevel = function(level) {
		$ScriptMaterialsLab['Game_Actor.prototype.expForLevel'] = true;
		$ScriptMaterialsLab['Game_Actor.prototype.expForLevel・version'] = 1.00;
		if ($ScriptMaterialsLab['経験値詳細設定']) {
			var value = this.getExpList(level);
			if (value != undefined) {return value;}
		}
		var c = this.currentClass();
		var basis = c.expParams[0];
		var extra = c.expParams[1];
		var acc_a = c.expParams[2];
		var acc_b = c.expParams[3];
		return Math.round(basis*(Math.pow(level-1, 0.9+acc_a/250))*level*
		(level+1)/(6+Math.pow(level,2)/50/acc_b)+(level-1)*extra);
	};
	}
	//--------------------------------------------------------------------
	// ○ Game_Actor.prototype.getExpList
	//--------------------------------------------------------------------
	Game_Actor.prototype.getExpList = function(level) {
		var exp_list = 経験値詳細設定.経験値リスト(this._classId);
		if (exp_list != undefined) {
			if (exp_list[level - 1] != undefined) {return exp_list[level - 1];}
			else {
				var max = exp_list.length;
				var last = exp_list[max - 1];
				var rate = 経験値詳細設定.自動加算値(this._classId);
				return last + (rate * (level - max));
			}
		}
	}
	経験値詳細設定.経験値リスト = function(classId) { switch (classId) {
		case 1 : return [0, 62, 146, 260, 407, 593, 819, 1089, 1404, 1766, 2174, 2630, 3135, 3689, 4291, 4943, 5645, 6396, 7197, 8048]
		case 2 : return [0, 80, 170, 277, 408, 566, 754, 975, 1231, 1523, 1917, 2398, 2953, 3575, 4256, 4992, 5779, 6614, 7495, 8421]
		case 3 : return [0, 57, 130, 225, 346, 497, 680, 897, 1150, 1440, 1818, 2271, 2790, 3370, 4005, 4691, 5426, 6207, 7032, 7902]
		case 4 : return [0, 57, 130, 225, 346, 497, 680, 897, 1150, 1440, 1818, 2271, 2790, 3370, 4005, 4691, 5426, 6207, 7032, 7902]
		case 5 : return [0, 57, 130, 225, 346, 497, 680, 897, 1150, 1440, 1818, 2271, 2790, 3370, 4005, 4691, 5426, 6207, 7032, 7902]
		case 6 : return [0, 57, 130, 225, 346, 497, 680, 897, 1150, 1440, 1818, 2271, 2790, 3370, 4005, 4691, 5426, 6207, 7032, 7902]
		case 7 : return [0, 57, 130, 225, 346, 497, 680, 897, 1150, 1440, 1818, 2271, 2790, 3370, 4005, 4691, 5426, 6207, 7032, 7902]
		case 8 : return [0, 80, 170, 277, 408, 566, 754, 975, 1231, 1523, 1902, 2357, 2877, 3458, 4093, 4780, 5515, 6296, 7122, 7991]
		//case 9 : return [0, 90, 190, 308, 453, 627, 834, 1038, 1360, 1681, 2118, 2653, 3272, 3966, 4726, 5547, 6424, 7356, 8338, 9370]
		case 9 : return[0, 87, 183, 294, 428, 588, 780, 1001, 1258, 1551, 1956, 2454, 3033, 3682, 4394, 5163, 5985, 6856, 7774, 8738]
		case 10 : return [0,47, 105, 180, 275, 392, 532, 696, 884, 1097, 1335, 1598, 1886, 2198, 2536, 2898, 3286, 3698, 4136, 4598]

	}}
})();